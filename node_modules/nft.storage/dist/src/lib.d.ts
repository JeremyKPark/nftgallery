/**
 * @implements API.Service
 */
export class NFTStorage implements API.Service {
    /**
     * @hidden
     * @param {string} token
     */
    static auth(token: string): {
        Authorization: string;
    };
    /**
     * @param {API.Service} service
     * @param {Blob} blob
     * @returns {Promise<API.CIDString>}
     */
    static storeBlob({ endpoint, token }: API.Service, blob: Blob): Promise<API.CIDString>;
    /**
     * @param {API.Service} service
     * @param {Iterable<File>} files
     * @returns {Promise<API.CIDString>}
     */
    static storeDirectory({ endpoint, token }: API.Service, files: Iterable<File>): Promise<API.CIDString>;
    /**
     * @param {API.Service} service
     * @param {string} cid
     * @returns {Promise<API.StatusResult>}
     */
    static status({ endpoint, token }: API.Service, cid: string): Promise<API.StatusResult>;
    /**
     * @param {API.Service} service
     * @param {string} cid
     * @returns {Promise<void>}
     */
    static delete({ endpoint, token }: API.Service, cid: string): Promise<void>;
    /**
     * Constructs a client bound to the given `options.token` and
     * `options.endpoint`.
     *
     * @example
     * ```js
     * import { NFTStorage, File, Blob } from "nft.storage"
     * const client = new NFTStorage({ token: API_TOKEN })
     *
     * const cid = await client.storeBlob(new Blob(['hello world']))
     * ```
     * Optionally you could pass an alternative API endpoint (e.g. for testing)
     * @example
     * ```js
     * import { NFTStorage } from "nft.storage"
     * const client = new NFTStorage({
     *   token: API_TOKEN
     *   endpoint: new URL('http://localhost:8080/')
     * })
     * ```
     *
     * @param {{token: string, endpoint?:URL}} options
     */
    constructor({ token, endpoint }: {
        token: string;
        endpoint?: URL;
    });
    /**
     * Authorization token.
     *
     * @readonly
     */
    readonly token: string;
    /**
     * Service API endpoint `URL`.
     * @readonly
     */
    readonly endpoint: URL;
    /**
     * Stores a single file and returns the corresponding Content Identifier (CID).
     * Takes a [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob)
     * or a [File](https://developer.mozilla.org/en-US/docs/Web/API/File). Note
     * that no file name or file metadata is retained.
     *
     * @example
     * ```js
     * const content = new Blob(['hello world'])
     * const cid = await client.storeBlob(content)
     * cid //> 'Qmf412jQZiuVUtdgnB36FXFX7xg5V6KEbSJ4dpQuhkLyfD'
     * ```
     *
     * @param {Blob} blob
     */
    storeBlob(blob: Blob): Promise<API.CIDString>;
    /**
     * Stores a directory of files and returns a CID for the directory.
     *
     * @example
     * ```js
     * const cid = client.storeDirectory([
     *   new File(['hello world'], 'hello.txt'),
     *   new File([JSON.stringify({'from': 'incognito'}, null, 2)], 'metadata.json')
     * ])
     * cid //>
     * ```
     *
     * Argument can be a [FileList](https://developer.mozilla.org/en-US/docs/Web/API/FileList)
     * instance as well, in which case directory structure will be retained.
     *
     * @param {Iterable<File>} files
     */
    storeDirectory(files: Iterable<File>): Promise<API.CIDString>;
    /**
     * Returns current status of the stored content by its CID.
     * @example
     * ```js
     * const status = await client.status('Qmf412jQZiuVUtdgnB36FXFX7xg5V6KEbSJ4dpQuhkLyfD')
     * ```
     *
     * @param {string} cid
     */
    status(cid: string): Promise<API.StatusResult>;
    /**
     * Removes stored content by its CID from the service.
     *
     * > Please note that even if content is removed from the service other nodes
     * that have replicated it might still continue providing it.
     *
     * @example
     * ```js
     * await client.delete('Qmf412jQZiuVUtdgnB36FXFX7xg5V6KEbSJ4dpQuhkLyfD')
     * ```
     *
     * @param {string} cid
     */
    delete(cid: string): Promise<void>;
}
import { File } from "./platform.js";
import { Blob } from "./platform.js";
import { FormData } from "./platform.js";
import * as API from "./lib/interface.js";
export { File, Blob, FormData };
//# sourceMappingURL=lib.d.ts.map
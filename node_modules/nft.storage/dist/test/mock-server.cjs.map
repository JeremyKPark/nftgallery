{"version":3,"file":"mock-server.cjs","sources":["../../test/mock-server.js"],"sourcesContent":["import http from 'http'\nimport fetch, {\n  Headers,\n  Request as FetchRequest,\n  Response as FetchResponse,\n} from '@web-std/fetch'\nimport { iterateMultipart } from '@ssttevee/multipart-parser'\nimport { FormData } from '@web-std/form-data'\nimport { File } from '@web-std/file'\nimport { ReadableStream } from '@web-std/blob'\n\nconst encoder = new TextEncoder()\nconst decoder = new TextDecoder()\nexport { fetch, Headers }\n\n/**\n *\n * @param {AsyncIterator<string|Uint8Array>|Iterator<string|Uint8Array>} source\n * @returns {ReadableStream<Uint8Array>}\n */\nconst toReadableStream = (source) =>\n  new ReadableStream({\n    async pull(controller) {\n      try {\n        while (controller.desiredSize || 0 > 0) {\n          const chunk = await source.next()\n          if (chunk.done) {\n            controller.close()\n          } else {\n            const bytes =\n              typeof chunk.value === 'string'\n                ? encoder.encode(chunk.value)\n                : chunk.value\n            controller.enqueue(bytes)\n          }\n        }\n      } catch (error) {\n        controller.error(error)\n      }\n    },\n    cancel(reason) {\n      if (reason) {\n        if (typeof source.throw === 'function') {\n          return void source.throw(reason)\n        }\n      }\n      if (typeof source.return === 'function') {\n        source.return()\n      }\n      return\n    },\n  })\n\n/**\n * @typedef {{body: ReadableStream<Uint8Array>|null}} Source\n *\n * @param {Source} source\n * @returns {Promise<Uint8Array>}\n */\nconst toBytes = async ({ body }) => {\n  if (body == null) {\n    return new Uint8Array(0)\n  }\n  const chunks = []\n  const reader = body.getReader()\n  let byteLength = 0\n  while (true) {\n    const chunk = await reader.read()\n    if (chunk.done) {\n      break\n    } else {\n      byteLength += chunk.value.byteLength\n      chunks.push(chunk.value)\n    }\n  }\n\n  const bytes = new Uint8Array(byteLength)\n  let offset = 0\n  for (const chunk of chunks) {\n    bytes.set(chunk, offset)\n    offset += chunk.byteLength\n  }\n\n  return bytes\n}\n\n/**\n *\n * @param {Source} source\n * @returns {Promise<ArrayBuffer>}\n */\nconst toArrayBuffer = async (source) => {\n  const bytes = await toBytes(source)\n  return bytes.buffer\n}\n\n/**\n * @param {Source} source\n */\nconst toText = async (source) => {\n  const bytes = await toBytes(source)\n  return decoder.decode(bytes)\n}\n\n/**\n * @param {Source} source\n */\nconst toBlob = async (source) => {\n  const bytes = await toBytes(source)\n  return new Blob([bytes])\n}\n\n/**\n * @param {Source} source\n */\nconst toJSON = async (source) => {\n  const text = await toText(source)\n  return JSON.parse(text)\n}\n\n/**\n * @param {Request|Response} source\n */\nconst toFormData = async ({ body, headers }) => {\n  const contentType = headers.get('Content-Type') || ''\n  const [type, boundary] = contentType.split(/\\s*;\\s*boundary=/)\n  if (type === 'multipart/form-data' && boundary != null && body != null) {\n    const form = new FormData()\n    const parts = iterateMultipart(body, boundary)\n    for await (const { name, data, filename, contentType } of parts) {\n      if (filename) {\n        form.append(name, new File([data], filename, { type: contentType }))\n      } else {\n        form.append(name, new TextDecoder().decode(data), filename)\n      }\n    }\n    return form\n  } else {\n    throw new TypeError('Could not parse content as FormData.')\n  }\n}\n\n/**\n * @param {Request|Response} self\n */\nconst bodyOf = (self) => {\n  const stream = self._rawStream()\n\n  const body =\n    stream == null\n      ? null\n      : stream instanceof Uint8Array || typeof stream === 'string'\n      ? toReadableStream([stream][Symbol.iterator]())\n      : // @ts-ignore\n        toReadableStream(stream[Symbol.asyncIterator]())\n\n  Object.defineProperty(self, 'body', { value: body })\n  return body\n}\n\nexport class Request extends FetchRequest {\n  _rawStream() {\n    return super.body\n  }\n\n  /**\n   * @type {ReadableStream<Uint8Array>|null}\n   */\n  // @ts-ignore - we want ReadableStream not node stream\n  get body() {\n    return bodyOf(this)\n  }\n\n  arrayBuffer() {\n    return toArrayBuffer(this)\n  }\n\n  /**\n   * @returns {Promise<globalThis.Blob>}\n   */\n  // @ts-ignore - we want starndard blob not the node-fetch one\n  blob() {\n    return toBlob(this)\n  }\n\n  text() {\n    return toText(this)\n  }\n\n  json() {\n    return toJSON(this)\n  }\n\n  formData() {\n    return toFormData(this)\n  }\n}\n\nexport class Response extends FetchResponse {\n  _rawStream() {\n    return super.body\n  }\n\n  /**\n   * @type {ReadableStream<Uint8Array>|null}\n   */\n  // @ts-ignore - we want ReadableStream not node stream\n  get body() {\n    return bodyOf(this)\n  }\n\n  arrayBuffer() {\n    return toArrayBuffer(this)\n  }\n\n  /**\n   * @returns {Promise<globalThis.Blob>}\n   */\n  // @ts-ignore - we want starndard blob not the node-fetch one\n  blob() {\n    return toBlob(this)\n  }\n\n  text() {\n    return toText(this)\n  }\n\n  json() {\n    return toJSON(this)\n  }\n\n  formData() {\n    return toFormData(this)\n  }\n}\n\n/**\n * @template State\n */\nexport class Service {\n  /**\n   * @param {http.Server} server\n   * @param {State} state\n   * @param {(request:Request, state:State) => Promise<Response>} handler\n   */\n  constructor(server, state, handler) {\n    this.server = server\n    this.state = state\n    this.handler = handler\n    this.onrequest = this.onrequest.bind(this)\n  }\n  get address() {\n    const {\n      port,\n      address,\n      family,\n    } = /** @type {import('net').AddressInfo} */ (this.server.address())\n\n    return { port, host: family === 'IPv6' ? `127.0.0.1` : address }\n  }\n  get url() {\n    const { host, port } = this.address\n    return new URL(`http://${host}:${port}`)\n  }\n\n  /**\n   *\n   * @param {http.IncomingMessage} incoming\n   * @param {http.ServerResponse} outgoing\n   */\n  async onrequest(incoming, outgoing) {\n    try {\n      const { host, port } = this.address\n      const url = new URL(incoming.url || '/', `http://${host}:${port}`)\n\n      const request = new Request(url.href, {\n        method: incoming.method,\n        // @ts-ignore\n        headers: new Headers({ ...incoming.headers }),\n        body: toBody(incoming),\n      })\n\n      const response = await this.handler(request, this.state)\n      const headers = Object.fromEntries(response.headers.entries())\n      outgoing.writeHead(response.status, headers)\n      const body = response.body ? response.body : []\n      // @ts-ignore\n      for await (const chunk of body) {\n        outgoing.write(chunk)\n      }\n\n      outgoing.end()\n    } catch (error) {\n      if (!outgoing.hasHeader) {\n        outgoing.writeHead(error.status || 500)\n      }\n      outgoing.write(error.stack)\n      outgoing.end()\n    }\n  }\n}\n\n/**\n * @param {http.IncomingMessage} inn\n */\nconst toBody = (inn) => {\n  switch (inn.method) {\n    case 'HEAD':\n    case 'GET':\n      return undefined\n    default:\n      return inn\n  }\n}\n\n/**\n * @param {Service<any>} service\n * @param {number} [port]\n */\nexport const listen = (service, port = 0) =>\n  new Promise((resolve) => {\n    service.server.once('listening', () => resolve(service))\n    service.server.addListener('request', service.onrequest)\n    service.server.listen(port)\n  })\n\n/**\n * @template State\n * @param {State} state\n * @param {(request:Request, state:State) => Promise<Response>} handler\n */\nexport const activate = async (state, handler) => {\n  const service = new Service(new http.Server(), state, handler)\n  await listen(service)\n  return service\n}\n\n/**\n * @param {Service<any>} service\n */\nexport const deactivate = (service) => {\n  service.server.close()\n}\n"],"names":["ReadableStream","FormData","iterateMultipart","File","FetchRequest","FetchResponse","Headers"],"mappings":"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"}
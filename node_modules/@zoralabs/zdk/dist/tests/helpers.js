"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deployCurrency = exports.approveCurrency = exports.mintCurrency = exports.setupZora = void 0;
const typechain_1 = require("@zoralabs/core/dist/typechain");
const bignumber_1 = require("@ethersproject/bignumber");
const constants_1 = require("@ethersproject/constants");
async function setupZora(wallet, testWallets) {
    const market = await (await new typechain_1.MarketFactory(wallet).deploy()).deployed();
    const marketAddress = market.address;
    const media = await (await new typechain_1.MediaFactory(wallet).deploy(market.address)).deployed();
    const mediaAddress = media.address;
    await market.configure(mediaAddress);
    const currency = await (await new typechain_1.BaseErc20Factory(wallet).deploy('TEST', 'TEST', bignumber_1.BigNumber.from(18))).deployed();
    const currencyAddress = currency.address;
    for (const toWallet of testWallets) {
        await mintCurrency(wallet, currencyAddress, toWallet.address, bignumber_1.BigNumber.from('10000000000000000000000'));
        await approveCurrency(toWallet, currencyAddress, marketAddress);
    }
    return {
        media: mediaAddress,
        market: marketAddress,
        currency: currencyAddress,
    };
}
exports.setupZora = setupZora;
async function mintCurrency(wallet, tokenAdress, to, amount) {
    return typechain_1.BaseErc20Factory.connect(tokenAdress, wallet).mint(to, amount);
}
exports.mintCurrency = mintCurrency;
async function approveCurrency(wallet, tokenAddress, to) {
    return typechain_1.BaseErc20Factory.connect(tokenAddress, wallet).approve(to, constants_1.MaxUint256);
}
exports.approveCurrency = approveCurrency;
async function deployCurrency(wallet, name, symbol, decimals) {
    const currency = await (await new typechain_1.BaseErc20Factory(wallet).deploy(name, symbol, bignumber_1.BigNumber.from(decimals))).deployed();
    return currency.address;
}
exports.deployCurrency = deployCurrency;
//# sourceMappingURL=helpers.js.map
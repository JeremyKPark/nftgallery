{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from \"react\"; // State management\n\nimport Post from \"@components/Post\"; // Post content\n\nimport Dropzone from \"react-dropzone\"; // React dropzone upload\n\nimport { useRouter } from \"next/router\"; // Router\n\nimport Layout from \"@components/Layout\"; // Layout wrapper\n\nimport { web3 } from \"@containers/index\"; // Web3 container\n\nimport styles from \"@styles/pages/Create.module.scss\"; // Page styles\n\nexport default function Create() {\n  var router = useRouter(); // Router navigation\n\n  var _useState = useState(\"\"),\n      name = _useState[0],\n      setName = _useState[1]; // Media name\n\n\n  var _useState2 = useState(null),\n      share = _useState2[0],\n      setShare = _useState2[1]; // Media fee share with past owner\n\n\n  var _useState3 = useState(null),\n      upload = _useState3[0],\n      setUpload = _useState3[1]; // Uploaded file\n\n\n  var _useState4 = useState(false),\n      loading = _useState4[0],\n      setLoading = _useState4[1]; // Global loading state\n\n\n  var _useState5 = useState(\"\"),\n      uploadName = _useState5[0],\n      setUploadName = _useState5[1]; // Uploaded file name\n\n\n  var _useState6 = useState(null),\n      uploadText = _useState6[0],\n      setUploadText = _useState6[1]; // Text content\n\n\n  var _useState7 = useState(\"\"),\n      description = _useState7[0],\n      setDescription = _useState7[1]; // Media description\n  // Global state\n\n\n  var _web3$useContainer = web3.useContainer(),\n      address = _web3$useContainer.address,\n      authenticate = _web3$useContainer.authenticate,\n      mintMedia = _web3$useContainer.mintMedia;\n  /**\n   * Authenticate dApp with global loading\n   */\n\n\n  var authenticateWithLoading = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true); // Toggle loading\n\n              _context.next = 3;\n              return authenticate();\n\n            case 3:\n              // Authenticate\n              setLoading(false); // Toggle loading\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function authenticateWithLoading() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  /**\n   * Mint media with global loading\n   */\n\n\n  var mintWithLoading = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setLoading(true); // Toggle loading\n\n              _context2.prev = 1;\n              _context2.next = 4;\n              return mintMedia(upload, name, description, share);\n\n            case 4:\n              // Mint media\n              router.push(\"/success\"); // Redirect to success page\n\n              _context2.next = 10;\n              break;\n\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.log(\"Error when executing: \", _context2.t0);\n\n            case 10:\n              setLoading(false); // Toggle loading\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 7]]);\n    }));\n\n    return function mintWithLoading() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  /**\n   * File upload handler\n   * @param {File} file media\n   */\n\n\n  var dropHandler = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(file) {\n      var _file, File, fileName, textContent;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              // Save file\n              _file = _slicedToArray(file, 1), File = _file[0];\n              setUpload(File); // Update upload name\n\n              fileName = File.name;\n              setUploadName(fileName); // Update text content if text file\n\n              if (!File.type.startsWith(\"text\")) {\n                _context3.next = 9;\n                break;\n              }\n\n              _context3.next = 7;\n              return File.text();\n\n            case 7:\n              textContent = _context3.sent;\n              setUploadText(textContent);\n\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function dropHandler(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsx(Layout, {\n    children: !address ?\n    /*#__PURE__*/\n    // If not authenticated, display unauthenticated state\n    _jsxs(\"div\", {\n      className: styles.create__unauthenticated,\n      children: [/*#__PURE__*/_jsx(\"h2\", {\n        children: \"Please authenticate\"\n      }), /*#__PURE__*/_jsx(\"p\", {\n        children: \"You must authorize with your wallet to mint media.\"\n      }), /*#__PURE__*/_jsx(\"button\", {\n        onClick: authenticateWithLoading,\n        disabled: loading,\n        children: loading ? \"Connecting...\" : \"Connect\"\n      })]\n    }) :\n    /*#__PURE__*/\n    // Else, if authenticated, display grid\n    _jsx(\"div\", {\n      className: styles.create,\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.create__grid,\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: styles.create__grid_left,\n          children: [/*#__PURE__*/_jsx(\"h2\", {\n            children: \"Create Media\"\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: styles.create__upload,\n            children: [/*#__PURE__*/_jsxs(\"div\", {\n              children: [/*#__PURE__*/_jsxs(\"div\", {\n                children: [/*#__PURE__*/_jsxs(\"label\", {\n                  htmlFor: \"upload\",\n                  children: [\"Upload Media\", \" \", /*#__PURE__*/_jsx(\"span\", {\n                    className: styles.create__upload_required,\n                    children: \"(required)\"\n                  })]\n                }), /*#__PURE__*/_jsx(\"span\", {\n                  children: \"Supports common image, video, audio, and text formats.\"\n                }), /*#__PURE__*/_jsx(Dropzone // Restrict to maximum 1 upload\n                , {\n                  maxFiles: 1 // Restrict drozone to specific mimetypes\n                  ,\n                  accept: [\"image/png\", \"image/jpeg\", \"image/gif\", \"video/mp4\", \"video/quicktime\", \"audio/mpeg\", \"audio/wav\", \"text/plain\"] // On file drop, run storkDropHandler\n                  ,\n                  onDrop: function onDrop(acceptedFiles) {\n                    return dropHandler(acceptedFiles);\n                  },\n                  children: function children(_ref4) {\n                    var getRootProps = _ref4.getRootProps,\n                        getInputProps = _ref4.getInputProps;\n                    return /*#__PURE__*/_jsx(\"section\", {\n                      children: /*#__PURE__*/_jsxs(\"div\", _objectSpread(_objectSpread({\n                        className: styles.upload__field\n                      }, getRootProps()), {}, {\n                        children: [/*#__PURE__*/_jsx(\"input\", _objectSpread({}, getInputProps())), /*#__PURE__*/_jsx(\"span\", {\n                          children: uploadName ? uploadName : \"You can drag and drop file here.\"\n                        })]\n                      }))\n                    });\n                  }\n                })]\n              }), /*#__PURE__*/_jsxs(\"div\", {\n                children: [/*#__PURE__*/_jsxs(\"label\", {\n                  htmlFor: \"name\",\n                  children: [\"Name\", \" \", /*#__PURE__*/_jsx(\"span\", {\n                    className: styles.create__upload_required,\n                    children: \"(required)\"\n                  })]\n                }), /*#__PURE__*/_jsx(\"input\", {\n                  id: \"name\",\n                  type: \"text\",\n                  placeholder: \"Enter Name\",\n                  value: name,\n                  onChange: function onChange(e) {\n                    return setName(e.target.value);\n                  }\n                })]\n              }), /*#__PURE__*/_jsxs(\"div\", {\n                children: [/*#__PURE__*/_jsx(\"label\", {\n                  htmlFor: \"description\",\n                  children: \"Description\"\n                }), /*#__PURE__*/_jsx(\"textarea\", {\n                  id: \"description\",\n                  type: \"text\",\n                  placeholder: \"Enter Description\",\n                  value: description,\n                  onChange: function onChange(e) {\n                    return setDescription(e.target.value);\n                  }\n                })]\n              }), /*#__PURE__*/_jsxs(\"div\", {\n                children: [/*#__PURE__*/_jsxs(\"label\", {\n                  htmlFor: \"percentage\",\n                  children: [\"Creator share percentage\", \" \", /*#__PURE__*/_jsx(\"span\", {\n                    className: styles.create__upload_required,\n                    children: \"(required)\"\n                  })]\n                }), /*#__PURE__*/_jsx(\"span\", {\n                  children: \"A percentage fee that you receive for all future sales of this piece.\"\n                }), /*#__PURE__*/_jsx(\"input\", {\n                  id: \"percentage\",\n                  type: \"number\",\n                  placeholder: \"Enter percentage\",\n                  min: \"0\",\n                  max: \"100\",\n                  value: share,\n                  onChange: function onChange(e) {\n                    return setShare(e.target.value);\n                  }\n                }), share > 100 || share < 0 ?\n                /*#__PURE__*/\n                // If share is not 0...100%, show error\n                _jsx(\"span\", {\n                  className: styles.create__error,\n                  children: \"Percentage fee must be between 0% - 100%.\"\n                }) : null]\n              })]\n            }), /*#__PURE__*/_jsx(\"div\", {\n              children: /*#__PURE__*/_jsx(\"button\", {\n                onClick: mintWithLoading,\n                disabled: share > 100 || // Fee share above 100%\n                share < 0 || // Fee share below 0%\n                name === \"\" || // No name\n                !share || // No fee share provided\n                !upload || // No uploaded file\n                loading // Global loading state\n                ,\n                children: loading ? \"Minting...\" : \"Mint Media\"\n              })\n            })]\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: styles.create__grid_right,\n          children: [/*#__PURE__*/_jsx(\"h2\", {\n            children: \"Preview\"\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: styles.create__preview,\n            children: /*#__PURE__*/_jsx(Post, {\n              creatorAddress: address,\n              ownerAddress: address,\n              createdAtTimestamp: Date.now() / 1000,\n              mimeType: upload ? upload.type : \"\",\n              contentURI: upload && upload.type ? // If file type is of text\n              upload.type.startsWith(\"text\") ? // Send text content instead of\n              uploadText : // URL to resource\n              URL.createObjectURL(upload) : \"\",\n              name: name ? name : \"\"\n            })\n          })]\n        })]\n      })\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}
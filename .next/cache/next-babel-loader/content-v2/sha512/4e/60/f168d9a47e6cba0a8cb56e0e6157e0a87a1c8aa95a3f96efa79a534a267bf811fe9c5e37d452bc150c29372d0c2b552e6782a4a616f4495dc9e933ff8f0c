{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    {\\n      medias(where: { owner: \\\"\", \"\\\" }) {\\n        id\\n        owner {\\n          id\\n        }\\n        creator {\\n          id\\n        }\\n        contentURI\\n        metadataURI\\n        createdAtTimestamp\\n      }\\n    }\\n  \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  {\\n    media(id:\\\"\", \"\\\") {\\n      id,\\n      owner {\\n        id\\n      },\\n      creator {\\n        id\\n      },\\n      contentURI,\\n      metadataURI,\\n      createdAtTimestamp\\n    }\\n  }\\n  \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  {\\n    users {\\n      creations {\\n        id\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from \"graphql-request\"; // graphql query language\n// Collect all users and creation ids\n\nexport var ZORA_CREATIONS_BY_USER = gql(_templateObject());\n/**\n * Returns gql query to retrieve specific Zora post\n * @param {Number} id post infromation to retrieve\n * @returns {gql} query with template string embedded\n */\n\nexport var ZORA_MEDIA_BY_ID = function ZORA_MEDIA_BY_ID(id) {\n  return gql(_templateObject2(), id.toString());\n};\n/**\n * Returns gql query to retrieve all Zora posts by owner\n * @param {String} owner address\n * @returns {gql} query with template string embedded\n */\n\nexport var ZORA_MEDIA_BY_OWNER = function ZORA_MEDIA_BY_OWNER(owner) {\n  return gql(_templateObject3(), owner);\n};\n/**\n * Calculates maximum number of Zora media items\n * @param {Object[]} users\n * @returns {Number} max number of Zora media items\n */\n\nexport var calculateLatestCreation = function calculateLatestCreation(users) {\n  // Collect all users\n  var allUsers = users.users;\n  var allCreationIDs = []; // For each user\n\n  var _iterator = _createForOfIteratorHelper(allUsers),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var user = _step.value;\n\n      // If user has creations\n      if (user.creations && user.creations.length > 0) {\n        // For each creation\n        var _iterator2 = _createForOfIteratorHelper(user.creations),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var creation = _step2.value;\n            // Push creation ID (cast to int) to allCreationIDs\n            allCreationIDs.push(parseInt(creation.id));\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    } // Return max creation ID\n\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return Math.max.apply(Math, allCreationIDs);\n};","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import axios from \"axios\"; // Axios requests\n\nimport client from \"data/index\"; // GraphQL client\n\nimport chrome from \"chrome-aws-lambda\"; // Chromium settings\n\nimport puppeteer from \"puppeteer-core\"; // Puppeteer core\n\nimport { getPostByID } from \"@data/functions\"; // Query function\n\nimport { ZORA_MEDIA_BY_OWNER } from \"data/queries\"; // Query utils\n\n/**\n * Generates HTML page from media and address template\n * @param {String} media highlighted image media\n * @param {String} address profile address\n */\n\nconst generateHTML = (media, address) => {\n  return `\n  <html>\n    <style>\n      @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap');\n      \n      * {\n        margin: 0;\n        padding: 0;\n      }\n      \n      html {\n        width: 1200px;\n        height: 600px;\n        background-color: #fff;\n        font-family: 'Poppins', sans-serif;\n      }\n\n      .zora {\n        width: 70px;\n        height: 70px;\n        position: absolute;\n        top: 25px;\n        left: 25px;\n      }\n\n      .highlight {\n        height: 400px;\n        width: auto;\n        margin-top: 100px;\n      }\n\n      .address {\n        font-size: 30px;\n        top: 45px;\n        left: 110px;\n        position: absolute;\n      }\n    </style>\n    <div>\n      <img class=\"zora\" src=\"https://zora.gallery/logo_orb.png\" alt=\"Orb\" />\n      <h2 class=\"address\">${address.substr(0, 5) + \"...\" + address.slice(address.length - 5)}\n      </h2>\n      <center>\n        <img class=\"highlight\" src=\"data:image/png;base64, ${media}\" />\n      </center>\n    </div>\n  </html>\n  `;\n};\n/**\n * Generates screenshot of html page\n */\n\n\nconst getScreenshot = async ({\n  html,\n  type = \"png\"\n}) => {\n  // Launch puppeteer browser\n  const browser = await puppeteer.launch({\n    // With chrome default args\n    args: chrome.args,\n    executablePath: await chrome.executablePath,\n    headless: false\n  }); // Make new page\n\n  const page = await browser.newPage(); // Set content to generated html, wait for image load\n\n  await page.setContent(html, {\n    waitUntil: \"networkidle0\"\n  });\n  const element = await page.$(\"html\"); // Take screenshot to png form\n\n  return await element.screenshot({\n    type\n  }).then(async data => {\n    // Close browser and return screenshot\n    await browser.close();\n    return data;\n  });\n};\n\nexport default (async (req, res) => {\n  const {\n    address\n  } = req.query; // Collect address from request query\n  // If address not present, throw error\n\n  if (!address) {\n    res.status(404).end();\n  } // Collect posts\n\n\n  const allPosts = await client.request( // By address\n  ZORA_MEDIA_BY_OWNER(address.toLowerCase()));\n  let ownedMedia = [];\n\n  for (let i = 0; i < allPosts.medias.length; i++) {\n    // Collect postID\n    const postID = allPosts.medias[i].id; // FIXME: hardcoded fix for /dev/null lmao\n\n    if (postID !== \"2\") {\n      // Collect post\n      const post = await getPostByID(allPosts.medias[i].id); // Push post to ownedMedia\n\n      ownedMedia.push(post);\n    }\n  } // Filter posts array for only images\n\n\n  ownedMedia = ownedMedia.filter(post => post.metadata.mimeType.startsWith(\"image\")); // If there is at least 1 image\n\n  if (ownedMedia.length > 0) {\n    // Collect the base64 of the image\n    const image = await getBase64(ownedMedia[0].contentURI); // Generate page html and take screenshot\n\n    const html = generateHTML(image, address);\n    const result = await getScreenshot({\n      html\n    }); // Return screenshot\n\n    res.writeHead(200, {\n      \"Content-Type\": \"image/png\"\n    });\n    res.end(result);\n  } else {\n    // Else, collect base64 of default meta\n    const image = Buffer.from(getBase64(\"https://zora.gallery/meta.png\"), \"base64\"); // Return screenshot\n\n    res.writeHead(200, {\n      \"Content-Type\": \"image/png\"\n    });\n    res.end(image);\n  }\n});\n/**\n * Returns media contentURI as Base64\n * @param {String} url of media\n */\n\nasync function getBase64(url) {\n  return axios.get(url, {\n    // Collect as ArrayBuffer\n    responseType: \"arraybuffer\"\n  }).then(response => // Convert response to base64\n  Buffer.from(response.data, \"binary\").toString(\"base64\"));\n}","map":null,"metadata":{},"sourceType":"module"}
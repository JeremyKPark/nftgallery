{"ast":null,"code":"import { Zora, constructMediaData, sha256FromBuffer, generateMetadata, constructBidShares } from \"@zoralabs/zdk\"; // Zora provider\n\nimport axios from \"axios\"; // axios requests\n\nimport Web3Modal from \"web3modal\"; // Web3Modal\n\nimport { providers } from \"ethers\"; // Ethers\n\nimport { useState, useEffect } from \"react\"; // State management\n\nimport { createContainer } from \"unstated-next\"; // Unstated-next containerization\n\nimport WalletConnectProvider from \"@walletconnect/web3-provider\"; // WalletConnectProvider (Web3Modal)\n// Web3Modal provider options\n\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider,\n    options: {\n      // Inject Infura\n      infuraId: process.env.NEXT_PUBLIC_INFURA_ID\n    }\n  }\n};\n\nfunction useWeb3() {\n  const {\n    0: zora,\n    1: setZora\n  } = useState(null); // Zora provider\n\n  const {\n    0: modal,\n    1: setModal\n  } = useState(null); // Web3Modal\n\n  const {\n    0: address,\n    1: setAddress\n  } = useState(null); // ETH address\n\n  /**\n   * Setup Web3Modal on page load (requires window)\n   */\n\n  const setupWeb3Modal = () => {\n    // Creaste new web3Modal\n    const web3Modal = new Web3Modal({\n      network: \"mainnet\",\n      cacheProvider: true,\n      providerOptions: providerOptions\n    }); // Set web3Modal\n\n    setModal(web3Modal);\n  };\n  /**\n   * Authenticate and store necessary items in global state\n   */\n\n\n  const authenticate = async () => {\n    // Initiate web3Modal\n    const web3Provider = await modal.connect();\n    await web3Provider.enable(); // Generate ethers provider\n\n    const provider = new providers.Web3Provider(web3Provider); // Collect address\n\n    const signer = provider.getSigner();\n    const address = await signer.getAddress();\n    setAddress(address); // Generate Zora provider\n\n    const zora = new Zora(signer, 1);\n    setZora(zora);\n  };\n  /**\n   * Converts File to an ArrayBuffer for hashing preperation\n   * @param {File} file uploaded file\n   * @returns {ArrayBuffer} from file\n   */\n\n\n  const getFileBuffer = async file => {\n    return new Promise((res, rej) => {\n      // create file reader\n      let reader = new FileReader(); // register event listeners\n\n      reader.addEventListener(\"loadend\", e => res(e.target.result));\n      reader.addEventListener(\"error\", rej); // read file\n\n      reader.readAsArrayBuffer(file);\n    });\n  };\n  /**\n   * Mints media to Zora\n   * @param {File} file media to mint\n   * @param {String} name of media\n   * @param {String} description of media\n   * @param {Number} fee to share with previous owner\n   */\n\n\n  const mintMedia = async (file, name, description, fee) => {\n    // Generate metadataJSON\n    const metadataJSON = generateMetadata(\"zora-20210101\", {\n      description: description ? description : \"\",\n      mimeType: file.type,\n      name: name,\n      version: \"zora-20210101\"\n    }); // Generate media buffer\n\n    const buffer = await getFileBuffer(file); // Generate content hashes\n\n    const contentHash = sha256FromBuffer(Buffer.from(buffer));\n    const metadataHash = sha256FromBuffer(Buffer.from(metadataJSON)); // Upload files to fleek\n\n    let formData = new FormData();\n    formData.append(\"upload\", file);\n    formData.append(\"name\", name);\n    formData.append(\"metadata\", metadataJSON); // Post upload endpoint\n\n    const upload = await axios.post(\"/api/upload\", formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    }); // Collect fileUrl and metadataUrl from Fleek\n\n    const {\n      fileUrl,\n      metadataUrl\n    } = upload.data; // Construct mediaData object\n\n    const mediaData = constructMediaData(fileUrl, metadataUrl, contentHash, metadataHash);\n    const bidShares = constructBidShares(0, // Creator share\n    100 - parseFloat(fee), // Owner share\n    parseFloat(fee) // Previous owner share\n    ); // Make transaction\n\n    const tx = await zora.mint(mediaData, bidShares);\n    await tx.wait(1); // Wait 1 confirmation and throw user to next screen\n  }; // On load events\n\n\n  useEffect(setupWeb3Modal, []);\n  return {\n    address,\n    mintMedia,\n    authenticate\n  };\n} // Create unstate-next container\n\n\nconst web3 = createContainer(useWeb3);\nexport default web3;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Zora, constructMediaData, sha256FromBuffer, generateMetadata, constructBidShares } from \"@zoralabs/zdk\"; // Zora provider\n\nimport axios from \"axios\"; // axios requests\n\nimport Web3Modal from \"web3modal\"; // Web3Modal\n\nimport { providers } from \"ethers\"; // Ethers\n\nimport { useState, useEffect } from \"react\"; // State management\n\nimport { createContainer } from \"unstated-next\"; // Unstated-next containerization\n\nimport WalletConnectProvider from \"@walletconnect/web3-provider\"; // WalletConnectProvider (Web3Modal)\n// Web3Modal provider options\n\nvar providerOptions = {\n  walletconnect: {\n    \"package\": WalletConnectProvider,\n    options: {\n      // Inject Infura\n      infuraId: process.env.NEXT_PUBLIC_INFURA_ID\n    }\n  }\n};\n\nfunction useWeb3() {\n  var _useState = useState(null),\n      zora = _useState[0],\n      setZora = _useState[1]; // Zora provider\n\n\n  var _useState2 = useState(null),\n      modal = _useState2[0],\n      setModal = _useState2[1]; // Web3Modal\n\n\n  var _useState3 = useState(null),\n      address = _useState3[0],\n      setAddress = _useState3[1]; // ETH address\n\n  /**\n   * Setup Web3Modal on page load (requires window)\n   */\n\n\n  var setupWeb3Modal = function setupWeb3Modal() {\n    // Creaste new web3Modal\n    var web3Modal = new Web3Modal({\n      network: \"mainnet\",\n      cacheProvider: true,\n      providerOptions: providerOptions\n    }); // Set web3Modal\n\n    setModal(web3Modal);\n  };\n  /**\n   * Authenticate and store necessary items in global state\n   */\n\n\n  var authenticate = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var web3Provider, provider, signer, address, zora;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return modal.connect();\n\n            case 2:\n              web3Provider = _context.sent;\n              _context.next = 5;\n              return web3Provider.enable();\n\n            case 5:\n              // Generate ethers provider\n              provider = new providers.Web3Provider(web3Provider); // Collect address\n\n              signer = provider.getSigner();\n              _context.next = 9;\n              return signer.getAddress();\n\n            case 9:\n              address = _context.sent;\n              setAddress(address); // Generate Zora provider\n\n              zora = new Zora(signer, 1);\n              setZora(zora);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function authenticate() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  /**\n   * Converts File to an ArrayBuffer for hashing preperation\n   * @param {File} file uploaded file\n   * @returns {ArrayBuffer} from file\n   */\n\n\n  var getFileBuffer = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(file) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", new Promise(function (res, rej) {\n                // create file reader\n                var reader = new FileReader(); // register event listeners\n\n                reader.addEventListener(\"loadend\", function (e) {\n                  return res(e.target.result);\n                });\n                reader.addEventListener(\"error\", rej); // read file\n\n                reader.readAsArrayBuffer(file);\n              }));\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function getFileBuffer(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  /**\n   * Mints media to Zora\n   * @param {File} file media to mint\n   * @param {String} name of media\n   * @param {String} description of media\n   * @param {Number} fee to share with previous owner\n   */\n\n\n  var mintMedia = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(file, name, description, fee) {\n      var metadataJSON, buffer, contentHash, metadataHash, formData, upload, _upload$data, fileUrl, metadataUrl, mediaData, bidShares, tx;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              // Generate metadataJSON\n              metadataJSON = generateMetadata(\"zora-20210101\", {\n                description: description ? description : \"\",\n                mimeType: file.type,\n                name: name,\n                version: \"zora-20210101\"\n              }); // Generate media buffer\n\n              _context3.next = 3;\n              return getFileBuffer(file);\n\n            case 3:\n              buffer = _context3.sent;\n              // Generate content hashes\n              contentHash = sha256FromBuffer(Buffer.from(buffer));\n              metadataHash = sha256FromBuffer(Buffer.from(metadataJSON)); // Upload files to fleek\n\n              formData = new FormData();\n              formData.append(\"upload\", file);\n              formData.append(\"name\", name);\n              formData.append(\"metadata\", metadataJSON); // Post upload endpoint\n\n              _context3.next = 12;\n              return axios.post(\"/api/upload\", formData, {\n                headers: {\n                  \"Content-Type\": \"multipart/form-data\"\n                }\n              });\n\n            case 12:\n              upload = _context3.sent;\n              // Collect fileUrl and metadataUrl from Fleek\n              _upload$data = upload.data, fileUrl = _upload$data.fileUrl, metadataUrl = _upload$data.metadataUrl; // Construct mediaData object\n\n              mediaData = constructMediaData(fileUrl, metadataUrl, contentHash, metadataHash);\n              bidShares = constructBidShares(0, // Creator share\n              100 - parseFloat(fee), // Owner share\n              parseFloat(fee) // Previous owner share\n              ); // Make transaction\n\n              _context3.next = 18;\n              return zora.mint(mediaData, bidShares);\n\n            case 18:\n              tx = _context3.sent;\n              _context3.next = 21;\n              return tx.wait(1);\n\n            case 21:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function mintMedia(_x2, _x3, _x4, _x5) {\n      return _ref3.apply(this, arguments);\n    };\n  }(); // On load events\n\n\n  useEffect(setupWeb3Modal, []);\n  return {\n    address: address,\n    mintMedia: mintMedia,\n    authenticate: authenticate\n  };\n} // Create unstate-next container\n\n\nvar web3 = createContainer(useWeb3);\nexport default web3;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport client from \"@data/index\"; // GraphQL client\n\nimport Post from \"@components/Post\"; // Post component\n\nimport Layout from \"@components/Layout\"; // Layout\n\nimport { useState, useEffect } from \"react\"; // React state management\n\nimport { getPostByID } from \"@data/functions\"; // Post collection helper\n\nimport styles from \"@styles/pages/Home.module.scss\"; // Component styles\n\nimport { calculateLatestCreation, ZORA_CREATIONS_BY_USER } from \"@data/queries\"; // queries\n\nexport default function Home() {\n  const {\n    0: posts,\n    1: setPosts\n  } = useState([]); // Posts array\n\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false); // Button loading state\n\n  const {\n    0: numPosts,\n    1: setNumPosts\n  } = useState(null); // Number of loadable posts\n\n  /**\n   * Collects initial 6 posts to display\n   */\n\n  const collectInitialPosts = async () => {\n    // Collect all users\n    const allUsers = await client.request(ZORA_CREATIONS_BY_USER); // Collect number of total posts\n\n    const numPosts = calculateLatestCreation(allUsers);\n    let initialPosts = [];\n\n    if (numPosts) {\n      // For numPosts ... numPosts - 6\n      for (let i = numPosts; i >= numPosts - 5; i--) {\n        // Collect post\n        const post = await getPostByID(i); // Push post to initialPosts\n\n        initialPosts.push(post);\n      }\n    }\n\n    setPosts([...initialPosts]); // Update new posts\n\n    setNumPosts(numPosts - 6); // Update number of loadable posts count\n  };\n  /**\n   * Collects more posts (6 at a time, unless < 6 remaining posts)\n   */\n\n\n  const collectMore = async () => {\n    setLoading(true); // Toggle button loading\n\n    let newPosts = [];\n    console.log(Math.max(numPosts - 5, 0), numPosts); // For numPosts ... max(numPosts - 6, 0)\n\n    for (let i = numPosts; i >= Math.max(numPosts - 5, 0); i--) {\n      // FIXME: hardcoded fix for /dev/null lmao\n      if (i !== 2) {\n        // Collect post\n        const post = await getPostByID(i); // Push post to newPosts\n\n        newPosts.push(post);\n      }\n    }\n\n    setPosts([...posts, ...newPosts]); // Append newPosts to posts array\n\n    setNumPosts(numPosts - 6); // Update number of loadable posts count\n\n    setLoading(false); // Toggle button loading\n  }; // Collect initial posts on load\n\n\n  useEffect(collectInitialPosts, []);\n  return /*#__PURE__*/_jsxs(Layout, {\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: styles.subheader,\n      children: /*#__PURE__*/_jsxs(\"span\", {\n        children: [\"Zora.Gallery is an\", \" \", /*#__PURE__*/_jsx(\"a\", {\n          href: \"https://github.com/anish-agnihotri/zora.gallery\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"open-source\"\n        }), \" \", \"community-operated interface to\", \" \", /*#__PURE__*/_jsx(\"a\", {\n          href: \"https://zora.engineering\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"ZoraOS\"\n        }), \".\"]\n      })\n    }), posts.length > 0 ?\n    /*#__PURE__*/\n    // If posts array contains > 0 posts\n    _jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: styles.showcase,\n        children: posts.map((post, i) => {\n          // For each Zora post\n          return (\n            /*#__PURE__*/\n            // Return Post component\n            _jsx(Post, {\n              creatorAddress: post.creator.id,\n              ownerAddress: post.owner.id,\n              createdAtTimestamp: post.createdAtTimestamp,\n              mimeType: post.metadata.mimeType,\n              contentURI: post.contentURI,\n              name: post.metadata.name\n            }, i)\n          );\n        })\n      }), posts && posts.length > 0 && posts[posts.length - 1].id !== \"0\" ?\n      /*#__PURE__*/\n      // If there remain posts that can be loaded, display button\n      _jsx(\"div\", {\n        className: styles.showcase__more,\n        children: /*#__PURE__*/_jsx(\"button\", {\n          onClick: () => collectMore(),\n          disabled: loading,\n          children: loading ? \"Loading...\" : \"Load More\"\n        })\n      }) :\n      /*#__PURE__*/\n      // Else, display text signalling (end, beginning)\n      _jsx(\"div\", {\n        className: styles.showcase__more,\n        children: /*#__PURE__*/_jsx(\"span\", {\n          children: \"Is this the end or beginning? You decide.\"\n        })\n      })]\n    }) :\n    /*#__PURE__*/\n    // Else, display loading state\n    _jsx(\"div\", {\n      className: styles.loading,\n      children: /*#__PURE__*/_jsx(\"h3\", {\n        children: \"Loading...\"\n      })\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport client from \"@data/index\"; // GraphQL client\n\nimport Post from \"@components/Post\"; // Post component\n\nimport Layout from \"@components/Layout\"; // Layout\n\nimport { useState, useEffect } from \"react\"; // React state management\n\nimport { getPostByID } from \"@data/functions\"; // Post collection helper\n\nimport styles from \"@styles/pages/Home.module.scss\"; // Component styles\n\nimport { calculateLatestCreation, ZORA_CREATIONS_BY_USER } from \"@data/queries\"; // queries\n\nexport default function Home() {\n  var _useState = useState([]),\n      posts = _useState[0],\n      setPosts = _useState[1]; // Posts array\n\n\n  var _useState2 = useState(false),\n      loading = _useState2[0],\n      setLoading = _useState2[1]; // Button loading state\n\n\n  var _useState3 = useState(null),\n      numPosts = _useState3[0],\n      setNumPosts = _useState3[1]; // Number of loadable posts\n\n  /**\n   * Collects initial 6 posts to display\n   */\n\n\n  var collectInitialPosts = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var allUsers, numPosts, initialPosts, i, post;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return client.request(ZORA_CREATIONS_BY_USER);\n\n            case 2:\n              allUsers = _context.sent;\n              // Collect number of total posts\n              numPosts = calculateLatestCreation(allUsers);\n              initialPosts = [];\n\n              if (!numPosts) {\n                _context.next = 15;\n                break;\n              }\n\n              i = numPosts;\n\n            case 7:\n              if (!(i >= numPosts - 5)) {\n                _context.next = 15;\n                break;\n              }\n\n              _context.next = 10;\n              return getPostByID(i);\n\n            case 10:\n              post = _context.sent;\n              // Push post to initialPosts\n              initialPosts.push(post);\n\n            case 12:\n              i--;\n              _context.next = 7;\n              break;\n\n            case 15:\n              setPosts([].concat(initialPosts)); // Update new posts\n\n              setNumPosts(numPosts - 6); // Update number of loadable posts count\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function collectInitialPosts() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  /**\n   * Collects more posts (6 at a time, unless < 6 remaining posts)\n   */\n\n\n  var collectMore = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var newPosts, i, post;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setLoading(true); // Toggle button loading\n\n              newPosts = [];\n              console.log(Math.max(numPosts - 5, 0), numPosts); // For numPosts ... max(numPosts - 6, 0)\n\n              i = numPosts;\n\n            case 4:\n              if (!(i >= Math.max(numPosts - 5, 0))) {\n                _context2.next = 13;\n                break;\n              }\n\n              if (!(i !== 2)) {\n                _context2.next = 10;\n                break;\n              }\n\n              _context2.next = 8;\n              return getPostByID(i);\n\n            case 8:\n              post = _context2.sent;\n              // Push post to newPosts\n              newPosts.push(post);\n\n            case 10:\n              i--;\n              _context2.next = 4;\n              break;\n\n            case 13:\n              setPosts([].concat(_toConsumableArray(posts), newPosts)); // Append newPosts to posts array\n\n              setNumPosts(numPosts - 6); // Update number of loadable posts count\n\n              setLoading(false); // Toggle button loading\n\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function collectMore() {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // Collect initial posts on load\n\n\n  useEffect(collectInitialPosts, []);\n  return /*#__PURE__*/_jsxs(Layout, {\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: styles.subheader,\n      children: /*#__PURE__*/_jsxs(\"span\", {\n        children: [\"Zora.Gallery is an\", \" \", /*#__PURE__*/_jsx(\"a\", {\n          href: \"https://github.com/anish-agnihotri/zora.gallery\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"open-source\"\n        }), \" \", \"community-operated interface to\", \" \", /*#__PURE__*/_jsx(\"a\", {\n          href: \"https://zora.engineering\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"ZoraOS\"\n        }), \".\"]\n      })\n    }), posts.length > 0 ?\n    /*#__PURE__*/\n    // If posts array contains > 0 posts\n    _jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: styles.showcase,\n        children: posts.map(function (post, i) {\n          // For each Zora post\n          return (\n            /*#__PURE__*/\n            // Return Post component\n            _jsx(Post, {\n              creatorAddress: post.creator.id,\n              ownerAddress: post.owner.id,\n              createdAtTimestamp: post.createdAtTimestamp,\n              mimeType: post.metadata.mimeType,\n              contentURI: post.contentURI,\n              name: post.metadata.name\n            }, i)\n          );\n        })\n      }), posts && posts.length > 0 && posts[posts.length - 1].id !== \"0\" ?\n      /*#__PURE__*/\n      // If there remain posts that can be loaded, display button\n      _jsx(\"div\", {\n        className: styles.showcase__more,\n        children: /*#__PURE__*/_jsx(\"button\", {\n          onClick: function onClick() {\n            return collectMore();\n          },\n          disabled: loading,\n          children: loading ? \"Loading...\" : \"Load More\"\n        })\n      }) :\n      /*#__PURE__*/\n      // Else, display text signalling (end, beginning)\n      _jsx(\"div\", {\n        className: styles.showcase__more,\n        children: /*#__PURE__*/_jsx(\"span\", {\n          children: \"Is this the end or beginning? You decide.\"\n        })\n      })]\n    }) :\n    /*#__PURE__*/\n    // Else, display loading state\n    _jsx(\"div\", {\n      className: styles.loading,\n      children: /*#__PURE__*/_jsx(\"h3\", {\n        children: \"Loading...\"\n      })\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}
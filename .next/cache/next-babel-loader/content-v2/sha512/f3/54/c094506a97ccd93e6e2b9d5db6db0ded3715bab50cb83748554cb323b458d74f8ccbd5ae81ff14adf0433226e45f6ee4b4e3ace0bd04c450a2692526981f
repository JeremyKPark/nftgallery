{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport Head from \"next/head\"; // Head meta\n\nimport client from \"@data/index\"; // GraphQL client\n\nimport Post from \"@components/Post\"; // Post component\n\nimport Layout from \"@components/Layout\"; // Layout wrapper\n\nimport { useState, useEffect } from \"react\"; // State management\n\nimport { getPostByID } from \"@data/functions\"; // Post retrieval function\n\nimport makeBlockie from \"ethereum-blockies-base64\"; // Ethereum avatar\n\nimport { ZORA_MEDIA_BY_OWNER } from \"@data/queries\"; // Retrieval query\n\nimport styles from \"@styles/pages/Profile.module.scss\"; // Component styles\n\nexport default function Home() {\n  const address = '0x3aDa0A88835691dAC6ae3EA2BDD4Af14Ee76B081';\n  const {\n    0: posts,\n    1: setPosts\n  } = useState([]); // Posts array\n\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true); // Global loading state\n\n  /**\n   * Collect owned media by address on load\n   */\n\n  const collectOwnedMedia = async () => {\n    // Collect all postIDs by owner\n    const allPosts = await client.request(ZORA_MEDIA_BY_OWNER(address.toLowerCase()));\n    let ownedMedia = []; // For all owned posts\n\n    for (let i = 0; i < allPosts.medias.length; i++) {\n      // Colelct postID\n      const postID = allPosts.medias[i].id; // FIXME: hardcoded fix for /dev/null lmao\n\n      if (postID !== \"2\") {\n        // Collect post\n        const post = await getPostByID(allPosts.medias[i].id); // Push post to ownedMedia\n\n        ownedMedia.push(post);\n      }\n    }\n\n    setPosts([...ownedMedia.reverse()]); // Update owned posts (reversed for newest first)\n\n    setLoading(false); // Toggle loading\n  }; // Collect owned media on load\n\n\n  useEffect(collectOwnedMedia, [address]);\n  return /*#__PURE__*/_jsxs(Layout, {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsx(\"meta\", {\n        property: \"og:image\",\n        content: `https://zora.gallery/api/meta/profile?address=${address}`\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        property: \"twitter:image\",\n        content: `https://zora.gallery/api/meta/profile?address=${address}`\n      })]\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: styles.profile,\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.profile__head,\n        children: [/*#__PURE__*/_jsx(\"img\", {\n          src: makeBlockie(address),\n          alt: \"Avatar\"\n        }), /*#__PURE__*/_jsx(\"h3\", {\n          children: address.toLowerCase()\n        }), /*#__PURE__*/_jsx(\"a\", {\n          href: `https://etherscan.io/address/${address}`,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"Etherscan\"\n        })]\n      })\n    }), loading ?\n    /*#__PURE__*/\n    // If loading state, show loading\n    _jsx(\"div\", {\n      className: styles.profile__media_empty,\n      children: /*#__PURE__*/_jsx(\"span\", {\n        children: \"Loading...\"\n      })\n    }) : posts.length > 0 ?\n    /*#__PURE__*/\n    // Else if, post count > 0\n    _jsx(\"div\", {\n      className: styles.profile__media,\n      children: posts.map((post, i) => {\n        // For each Zora post\n        return (\n          /*#__PURE__*/\n          // Return Post component\n          _jsx(Post, {\n            creatorAddress: post.creator.id,\n            ownerAddress: post.owner.id,\n            createdAtTimestamp: post.createdAtTimestamp,\n            mimeType: post.metadata.mimeType,\n            contentURI: post.contentURI,\n            name: post.metadata.name\n          }, i)\n        );\n      })\n    }) :\n    /*#__PURE__*/\n    // Else, if not loading and post count !> 0, return no owned media\n    _jsx(\"div\", {\n      className: styles.profile__media_empty,\n      children: /*#__PURE__*/_jsx(\"span\", {\n        children: \"No owned media.\"\n      })\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}
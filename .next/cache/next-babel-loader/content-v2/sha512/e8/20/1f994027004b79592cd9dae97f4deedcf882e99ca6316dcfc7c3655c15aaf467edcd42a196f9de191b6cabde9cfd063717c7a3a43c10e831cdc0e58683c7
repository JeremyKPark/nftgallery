{"ast":null,"code":"import fs from \"fs\"; // Filesystem\n\nimport { promisify } from \"util\"; // Promisify fs\n\nimport { v4 as uuid } from \"uuid\"; // UUID generation\n\nimport formidable from \"formidable\"; // Formidable form handling\n// import fleekStorage from \"@fleekhq/fleek-storage-js\"; // Fleek storage\n\nimport { NFTStorage, Blob } from 'nft.storage'; // NFT.Storage\n// Fleek authentication\n//const fleekAuth = {\n//  apiKey: process.env.FLEEK_API_KEY,\n//  apiSecret: process.env.FLEEK_API_SECRET,\n//};\n//NFT.Storage authentication\n\nconst apiKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJnaXRodWJ8NzM1NzcxMTYiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTYxNjI2MzUwMjUwNSwibmFtZSI6IlpvcmFVcGxvYWQifQ.bFZ9Rqp_483Jkscr_8T_1zN66SvBC-ngfmxg0GX004E';\nconst client = new NFTStorage({\n  token: apiKey\n});\nconst ipfsGateway = 'https://dweb.link/'; // Async readFile operation\n\nconst readFileAsync = promisify(fs.readFile);\nexport default (async (req, res) => {\n  // Setup incoming form data\n  const form = new formidable.IncomingForm({\n    keepExtensions: true\n  }); // Collect data from form\n\n  const data = await new Promise((res, rej) => {\n    // Parse form data\n    form.parse(req, (err, fields, files) => {\n      // if error, reject promise\n      if (err) return rej(err); // Else, return fields and files\n\n      res({\n        fields,\n        files\n      });\n    });\n  }); // Collect file and metadataJSON from POST request\n\n  const {\n    name,\n    metadata\n  } = data.fields; // Collect uploaded media\n\n  const {\n    upload: file\n  } = data.files;\n  const fileData = await readFileAsync(file.path); // If file, name, and metadata provided\n\n  if (fileData && name && metadata) {\n    // Upload media to NFT.Storage\n    const contentFile = new Blob([fileData]);\n    const fileUrl = ipfsGateway + (await client.storeBlob(contentFile)) + '/'; // Upload MetaData to NFT.Storage\n\n    const contentMeta = new Blob([metadata]);\n    const metadataUrl = ipfsGateway + (await client.storeBlob(contentMeta)) + '/';\n    console.log({\n      fileUrl,\n      metadataUrl\n    }); // Upload media to Fleek\n    // const { publicUrl: fileUrl } = await fleekStorage.upload({\n    //  ...fleekAuth,\n    // key: uuid(),\n    // data: fileData,\n    //});\n    // Upload metdata to Fleek\n    //const { publicUrl: metadataUrl } = await fleekStorage.upload({\n    //...fleekAuth,\n    //key: uuid(),\n    //data: metadata,\n    //});\n    // Return fileUrl and metadataUrl\n\n    res.send({\n      fileUrl,\n      metadataUrl\n    });\n  } else {\n    // Else, return 501\n    res.status(501);\n  } // End\n\n\n  res.end();\n}); // Remove bodyParser from endpoint\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from \"react\"; // State management\n\nimport Post from \"@components/Post\"; // Post content\n\nimport Dropzone from \"react-dropzone\"; // React dropzone upload\n\nimport { useRouter } from \"next/router\"; // Router\n\nimport Layout from \"@components/Layout\"; // Layout wrapper\n\nimport { web3 } from \"@containers/index\"; // Web3 container\n\nimport styles from \"@styles/pages/Create.module.scss\"; // Page styles\n\nexport default function Create() {\n  const router = useRouter(); // Router navigation\n\n  const {\n    0: name,\n    1: setName\n  } = useState(\"\"); // Media name\n\n  const {\n    0: share,\n    1: setShare\n  } = useState(null); // Media fee share with past owner\n\n  const {\n    0: upload,\n    1: setUpload\n  } = useState(null); // Uploaded file\n\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false); // Global loading state\n\n  const {\n    0: uploadName,\n    1: setUploadName\n  } = useState(\"\"); // Uploaded file name\n\n  const {\n    0: uploadText,\n    1: setUploadText\n  } = useState(null); // Text content\n\n  const {\n    0: description,\n    1: setDescription\n  } = useState(\"\"); // Media description\n  // Global state\n\n  const {\n    address,\n    authenticate,\n    mintMedia\n  } = web3.useContainer();\n  /**\n   * Authenticate dApp with global loading\n   */\n\n  const authenticateWithLoading = async () => {\n    setLoading(true); // Toggle loading\n\n    await authenticate(); // Authenticate\n\n    setLoading(false); // Toggle loading\n  };\n  /**\n   * Mint media with global loading\n   */\n\n\n  const mintWithLoading = async () => {\n    setLoading(true); // Toggle loading\n\n    try {\n      await mintMedia(upload, name, description, share); // Mint media\n\n      router.push(\"/success\"); // Redirect to success page\n    } catch (e) {\n      console.log(\"Error when executing: \", e);\n    }\n\n    setLoading(false); // Toggle loading\n  };\n  /**\n   * File upload handler\n   * @param {File} file media\n   */\n\n\n  const dropHandler = async file => {\n    // Save file\n    const [File] = file;\n    setUpload(File); // Update upload name\n\n    const fileName = File.name;\n    setUploadName(fileName); // Update text content if text file\n\n    if (File.type.startsWith(\"text\")) {\n      const textContent = await File.text();\n      setUploadText(textContent);\n    }\n  };\n\n  return /*#__PURE__*/_jsx(Layout, {\n    children: !address ?\n    /*#__PURE__*/\n    // If not authenticated, display unauthenticated state\n    _jsxs(\"div\", {\n      className: styles.create__unauthenticated,\n      children: [/*#__PURE__*/_jsx(\"h2\", {\n        children: \"Please authenticate\"\n      }), /*#__PURE__*/_jsx(\"p\", {\n        children: \"You must authorize with your wallet to mint media.\"\n      }), /*#__PURE__*/_jsx(\"button\", {\n        onClick: authenticateWithLoading,\n        disabled: loading,\n        children: loading ? \"Connecting...\" : \"Connect\"\n      })]\n    }) :\n    /*#__PURE__*/\n    // Else, if authenticated, display grid\n    _jsx(\"div\", {\n      className: styles.create,\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.create__grid,\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: styles.create__grid_left,\n          children: [/*#__PURE__*/_jsx(\"h2\", {\n            children: \"Create Media\"\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: styles.create__upload,\n            children: [/*#__PURE__*/_jsxs(\"div\", {\n              children: [/*#__PURE__*/_jsxs(\"div\", {\n                children: [/*#__PURE__*/_jsxs(\"label\", {\n                  htmlFor: \"upload\",\n                  children: [\"Upload Media\", \" \", /*#__PURE__*/_jsx(\"span\", {\n                    className: styles.create__upload_required,\n                    children: \"(required)\"\n                  })]\n                }), /*#__PURE__*/_jsx(\"span\", {\n                  children: \"Supports common image, video, audio, and text formats.\"\n                }), /*#__PURE__*/_jsx(Dropzone // Restrict to maximum 1 upload\n                , {\n                  maxFiles: 1 // Restrict drozone to specific mimetypes\n                  ,\n                  accept: [\"image/png\", \"image/jpeg\", \"image/gif\", \"video/mp4\", \"video/quicktime\", \"audio/mpeg\", \"audio/wav\", \"text/plain\"] // On file drop, run storkDropHandler\n                  ,\n                  onDrop: acceptedFiles => dropHandler(acceptedFiles),\n                  children: ({\n                    getRootProps,\n                    getInputProps\n                  }) => /*#__PURE__*/_jsx(\"section\", {\n                    children: /*#__PURE__*/_jsxs(\"div\", _objectSpread(_objectSpread({\n                      className: styles.upload__field\n                    }, getRootProps()), {}, {\n                      children: [/*#__PURE__*/_jsx(\"input\", _objectSpread({}, getInputProps())), /*#__PURE__*/_jsx(\"span\", {\n                        children: uploadName ? uploadName : \"You can drag and drop file here.\"\n                      })]\n                    }))\n                  })\n                })]\n              }), /*#__PURE__*/_jsxs(\"div\", {\n                children: [/*#__PURE__*/_jsxs(\"label\", {\n                  htmlFor: \"name\",\n                  children: [\"Name\", \" \", /*#__PURE__*/_jsx(\"span\", {\n                    className: styles.create__upload_required,\n                    children: \"(required)\"\n                  })]\n                }), /*#__PURE__*/_jsx(\"input\", {\n                  id: \"name\",\n                  type: \"text\",\n                  placeholder: \"Enter Name\",\n                  value: name,\n                  onChange: e => setName(e.target.value)\n                })]\n              }), /*#__PURE__*/_jsxs(\"div\", {\n                children: [/*#__PURE__*/_jsx(\"label\", {\n                  htmlFor: \"description\",\n                  children: \"Description\"\n                }), /*#__PURE__*/_jsx(\"textarea\", {\n                  id: \"description\",\n                  type: \"text\",\n                  placeholder: \"Enter Description\",\n                  value: description,\n                  onChange: e => setDescription(e.target.value)\n                })]\n              }), /*#__PURE__*/_jsxs(\"div\", {\n                children: [/*#__PURE__*/_jsxs(\"label\", {\n                  htmlFor: \"percentage\",\n                  children: [\"Creator share percentage\", \" \", /*#__PURE__*/_jsx(\"span\", {\n                    className: styles.create__upload_required,\n                    children: \"(required)\"\n                  })]\n                }), /*#__PURE__*/_jsx(\"span\", {\n                  children: \"A percentage fee that you receive for all future sales of this piece.\"\n                }), /*#__PURE__*/_jsx(\"input\", {\n                  id: \"percentage\",\n                  type: \"number\",\n                  placeholder: \"Enter percentage\",\n                  min: \"0\",\n                  max: \"100\",\n                  value: share,\n                  onChange: e => setShare(e.target.value)\n                }), share > 100 || share < 0 ?\n                /*#__PURE__*/\n                // If share is not 0...100%, show error\n                _jsx(\"span\", {\n                  className: styles.create__error,\n                  children: \"Percentage fee must be between 0% - 100%.\"\n                }) : null]\n              })]\n            }), /*#__PURE__*/_jsx(\"div\", {\n              children: /*#__PURE__*/_jsx(\"button\", {\n                onClick: mintWithLoading,\n                disabled: share > 100 || // Fee share above 100%\n                share < 0 || // Fee share below 0%\n                name === \"\" || // No name\n                !share || // No fee share provided\n                !upload || // No uploaded file\n                loading // Global loading state\n                ,\n                children: loading ? \"Minting...\" : \"Mint Media\"\n              })\n            })]\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: styles.create__grid_right,\n          children: [/*#__PURE__*/_jsx(\"h2\", {\n            children: \"Preview\"\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: styles.create__preview,\n            children: /*#__PURE__*/_jsx(Post, {\n              creatorAddress: address,\n              ownerAddress: address,\n              createdAtTimestamp: Date.now() / 1000,\n              mimeType: upload ? upload.type : \"\",\n              contentURI: upload && upload.type ? // If file type is of text\n              upload.type.startsWith(\"text\") ? // Send text content instead of\n              uploadText : // URL to resource\n              URL.createObjectURL(upload) : \"\",\n              name: name ? name : \"\"\n            })\n          })]\n        })]\n      })\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport dayjs from \"dayjs\"; // Dayjs date parsing\n\nimport Link from \"next/link\"; // Dynamic routing\n\nimport makeBlockie from \"ethereum-blockies-base64\"; // Ethereum avatar\n\nimport relativeTime from \"dayjs/plugin/relativeTime\"; // Dayjs extension\n\nimport styles from \"@styles/components/Post.module.scss\"; // Component styles\n// Extend Dayjs with relative time parsing\n\ndayjs.extend(relativeTime);\nexport default function Post(_ref) {\n  var creatorAddress = _ref.creatorAddress,\n      ownerAddress = _ref.ownerAddress,\n      createdAtTimestamp = _ref.createdAtTimestamp,\n      mimeType = _ref.mimeType,\n      contentURI = _ref.contentURI,\n      name = _ref.name,\n      props = _objectWithoutProperties(_ref, [\"creatorAddress\", \"ownerAddress\", \"createdAtTimestamp\", \"mimeType\", \"contentURI\", \"name\"]);\n\n  return /*#__PURE__*/_jsxs(\"div\", _objectSpread(_objectSpread({\n    className: styles.showcase__card\n  }, props), {}, {\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsx(Link, {\n        href: \"/profile/\".concat(creatorAddress),\n        children: /*#__PURE__*/_jsxs(\"a\", {\n          children: [/*#__PURE__*/_jsx(\"img\", {\n            src: makeBlockie(creatorAddress),\n            alt: \"Avatar\"\n          }), /*#__PURE__*/_jsx(\"span\", {\n            children: creatorAddress.substr(0, 5) + \"...\" + creatorAddress.slice(creatorAddress.length - 5)\n          })]\n        })\n      }), /*#__PURE__*/_jsx(\"span\", {\n        children: dayjs(parseInt(createdAtTimestamp) * 1000).fromNow()\n      })]\n    }), /*#__PURE__*/_jsx(\"div\", {\n      children: mimeType.startsWith(\"image\") ?\n      /*#__PURE__*/\n      // If content-type === image, return img component\n      _jsx(\"img\", {\n        src: contentURI,\n        alt: name\n      }) : mimeType.startsWith(\"text\") ?\n      /*#__PURE__*/\n      // If content-type === text, inject text\n      _jsx(\"span\", {\n        children: contentURI\n      }) : mimeType.startsWith(\"audio\") ?\n      /*#__PURE__*/\n      // If content-type === audio, return audio component\n      _jsx(\"audio\", {\n        controls: true,\n        children: /*#__PURE__*/_jsx(\"source\", {\n          src: contentURI,\n          type: mimeType\n        })\n      }) : mimeType.startsWith(\"video\") ?\n      /*#__PURE__*/\n      // Else, if nothing else, return video component\n      _jsx(\"video\", {\n        autoPlay: true,\n        playsInline: true,\n        loop: true,\n        children: /*#__PURE__*/_jsx(\"source\", {\n          src: contentURI,\n          type: mimeType\n        })\n      }) : mimeType === \"\" ?\n      /*#__PURE__*/\n      // If no media is uploaded (useful for /create)\n      _jsx(\"span\", {\n        className: styles.showcase__unsupported,\n        children: \"No media uploaded.\"\n      }) :\n      /*#__PURE__*/\n      // Else, if unsupported mimeType\n      _jsxs(\"span\", {\n        className: styles.showcase__unsupported,\n        children: [\"Unsupported file type (\", mimeType, \"). \", /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(\"a\", {\n          href: contentURI,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"Direct link\"\n        }), \".\"]\n      })\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsx(\"h3\", {\n        children: name\n      }), /*#__PURE__*/_jsxs(\"span\", {\n        children: [\"Collected by\", \" \", /*#__PURE__*/_jsx(Link, {\n          href: \"/profile/\".concat(ownerAddress),\n          children: /*#__PURE__*/_jsxs(\"a\", {\n            children: [/*#__PURE__*/_jsx(\"span\", {\n              children: ownerAddress.substr(0, 5) + \"...\" + ownerAddress.slice(ownerAddress.length - 5)\n            }), /*#__PURE__*/_jsx(\"img\", {\n              src: makeBlockie(ownerAddress),\n              alt: \"Avatar\"\n            })]\n          })\n        })]\n      })]\n    })]\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}
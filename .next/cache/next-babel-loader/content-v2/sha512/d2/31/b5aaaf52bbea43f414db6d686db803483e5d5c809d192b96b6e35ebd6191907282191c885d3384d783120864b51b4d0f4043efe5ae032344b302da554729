{"ast":null,"code":"import { gql } from \"graphql-request\"; // graphql query language\n// Collect all users and creation ids\n\nexport const ZORA_CREATIONS_BY_USER = gql`\n  {\n    users {\n      creations {\n        id\n      }\n    }\n  }\n`;\n/**\n * Returns gql query to retrieve specific Zora post\n * @param {Number} id post infromation to retrieve\n * @returns {gql} query with template string embedded\n */\n\nexport const ZORA_MEDIA_BY_ID = id => {\n  return gql`\n  {\n    media(id:\"${id.toString()}\") {\n      id,\n      owner {\n        id\n      },\n      creator {\n        id\n      },\n      contentURI,\n      metadataURI,\n      createdAtTimestamp\n    }\n  }\n  `;\n};\n/**\n * Returns gql query to retrieve all Zora posts by owner\n * @param {String} owner address\n * @returns {gql} query with template string embedded\n */\n\nexport const ZORA_MEDIA_BY_OWNER = owner => {\n  return gql`\n    {\n      medias(where: { owner: \"${owner}\" }) {\n        id\n        owner {\n          id\n        }\n        creator {\n          id\n        }\n        contentURI\n        metadataURI\n        createdAtTimestamp\n      }\n    }\n  `;\n};\n/**\n * Calculates maximum number of Zora media items\n * @param {Object[]} users\n * @returns {Number} max number of Zora media items\n */\n\nexport const calculateLatestCreation = users => {\n  // Collect all users\n  const allUsers = users.users;\n  let allCreationIDs = []; // For each user\n\n  for (const user of allUsers) {\n    // If user has creations\n    if (user.creations && user.creations.length > 0) {\n      // For each creation\n      for (const creation of user.creations) {\n        // Push creation ID (cast to int) to allCreationIDs\n        allCreationIDs.push(parseInt(creation.id));\n      }\n    }\n  } // Return max creation ID\n\n\n  return Math.max(...allCreationIDs);\n};","map":null,"metadata":{},"sourceType":"module"}